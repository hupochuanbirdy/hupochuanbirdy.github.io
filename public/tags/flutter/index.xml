<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Flutter on tothemoon&#39;s blog</title>
    <link>https://hupochuanbird.github.io/tags/flutter/</link>
    <description>Recent content in Flutter on tothemoon&#39;s blog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <copyright>All rights reserved</copyright>
    <lastBuildDate>Thu, 28 Aug 2025 16:21:25 +0100</lastBuildDate>
    <atom:link href="https://hupochuanbird.github.io/tags/flutter/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>How to read Data from USB CallerID deivce in Flutter</title>
      <link>https://hupochuanbird.github.io/posts/callerid_flutter/</link>
      <pubDate>Thu, 28 Aug 2025 16:21:25 +0100</pubDate>
      <guid>https://hupochuanbird.github.io/posts/callerid_flutter/</guid>
      <description>&lt;h2 id=&#34;intro&#34;&gt;Intro&lt;/h2&gt;&#xA;&lt;p&gt;In the restaurant ordering scenario, phone orders are still quite common (though to be honest, I personally think this approach feels pretty traditional, even a bit outdated). When a restaurant takes a call, the staff usually has to ask for the phone number, address, and name, then manually type everything into the system. This process is not only slow but also prone to mistakes.&lt;/p&gt;&#xA;&lt;p&gt;If we could recognize the phone number right when the call comes in, and directly match it with the customerâ€™s past information (like delivery address or frequently ordered dishes), we could save a lot of repetitive work. Thatâ€™s exactly what Iâ€™m trying to do here: integrate a CallerID device into a Flutter app. When a customer calls, the system instantly recognizes the number, and if the customer already exists in the database, their info pops up automaticallyâ€”no manual input needed.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Building Offline-Ready Apps with Flutter Drift: My Experience</title>
      <link>https://hupochuanbird.github.io/posts/flutter-drift-localdb/</link>
      <pubDate>Sat, 21 Jun 2025 16:11:45 +0100</pubDate>
      <guid>https://hupochuanbird.github.io/posts/flutter-drift-localdb/</guid>
      <description>&lt;p&gt;has been long time didnt write any article, working hardly, code and system design&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Our clients hope the system can keep running offlineâ€”some areas have no network at all, and others have very unstable&#xA;connections. This requirement made us rethink our whole data storage approach for the project. We needed something&#xA;robust enough to handle offline reads and writes, and smart enough to sync changes whenever the network returns.&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;h2 id=&#34;intro&#34;&gt;Intro&lt;/h2&gt;&#xA;&lt;p&gt;After researching various options, we landed on Drift as our local database solution for Flutter. Drift (formerly known&#xA;as Moor) offers powerful features like type-safe queries, auto-updating streams, and easy schema migrations, making it a&#xA;great fit for apps that need to perform reliablyâ€”online and offline.&lt;/p&gt;</description>
    </item>
    <item>
      <title>TencentIM(Instant messaging) C2C chat in Flutter</title>
      <link>https://hupochuanbird.github.io/posts/tencentim-in-flutter/</link>
      <pubDate>Sun, 21 Jul 2024 13:17:31 +0100</pubDate>
      <guid>https://hupochuanbird.github.io/posts/tencentim-in-flutter/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;Recently, I have been fully focused on IM (instant messaging) in Flutter. It&amp;rsquo;s quite a huge functionality. This article will include initialization, conversation management, message management (text, image, voice, video), and loading progress display. In my project, I use my own UI design, which I find more flexible and prettier (in my perspective ðŸ˜‰).&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;Here is the message module folder. A little bit ambitious, I have to say. Don&amp;rsquo;t worry, let&amp;rsquo;s dig into this interesting module in Flutter.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Make Horizontal Menu Auto Scroll With Vertical Product List in flutter</title>
      <link>https://hupochuanbird.github.io/posts/make-horizontal-menu-auto-scroll-with-vertical-product-list/</link>
      <pubDate>Thu, 15 Feb 2024 14:46:55 +0000</pubDate>
      <guid>https://hupochuanbird.github.io/posts/make-horizontal-menu-auto-scroll-with-vertical-product-list/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;My article is referencing &lt;a href=&#34;https://stackoverflow.com/questions/67195205/how-to-make-horizontal-menu-auto-scroll-with-vertical-product-list-in-flutter&#34;&gt;https://stackoverflow.com/questions/67195205/how-to-make-horizontal-menu-auto-scroll-with-vertical-product-list-in-flutter&lt;/a&gt;. However, in my case, the width of each category&amp;rsquo;s name and the height of each product card are dynamic and subject to slight changes. Now, let&amp;rsquo;s proceed.&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;h2 id=&#34;the-final-result&#34;&gt;The final result&lt;/h2&gt;&#xA;&lt;div class=&#34;polaroid&#34;&gt;&#xA;  &lt;a data-fancybox=&#34;gallery&#34; data-src=&#34;https://i.imgur.com/N1L4jL5.gif&#34;&gt;&#xA;      &lt;img src=&#34;https://i.imgur.com/N1L4jL5.gif&#34;/&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/div&gt;&#xA;&lt;h2 id=&#34;my-logic&#34;&gt;My Logic&lt;/h2&gt;&#xA;&lt;p&gt;Well, based on that article, I came up with some innovations. In order to explain easily, I have drawn a draft below:&lt;/p&gt;&#xA;&lt;p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&#xA;&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1&#xA;&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2&#xA;&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3&#xA;&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4&#xA;&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5&#xA;&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6&#xA;&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7&#xA;&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8&#xA;&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9&#xA;&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10&#xA;&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11&#xA;&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12&#xA;&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13&#xA;&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14&#xA;&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15&#xA;&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16&#xA;&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17&#xA;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&#xA;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;category1 | category2 | category3 ....&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;category1-section (section1 --&amp;gt; height: 300) &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; ---product1-1&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; ---product1-2&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; ---product1-3&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; ---product1-4&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;category2-section (section2 --&amp;gt; height: 120)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; ---product2-1&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; ---product2-2&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;category3-section (section4 --&amp;gt; height: 250)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; ---product3-1&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; ---product3-2&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; ---product3-3&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;The UI looks like this. The basic logic involves calculating the height of each category and its products using the &lt;code&gt;scrollController.addListener&lt;/code&gt; function to monitor the current scroll offset. For instance, if the height of the section for category1 is 300 and the height of the section for category2 is 120, when the offset reaches 300, it implies that the currentIndex is 1, and the interface should jump to the position of category2. The currentIndex indicates horizontal menu.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
